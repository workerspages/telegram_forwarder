# 工作流的名称，会显示在 GitHub Actions 页面
name: Build and Push Docker Image

# 触发工作流的事件
on:
  # 当有代码推送到 main 分支时触发
  push:
    branches: [ "main" ]
  # 允许你从 Actions 标签页手动触发此工作流
  workflow_dispatch:

# 定义一个名为 "build-and-push" 的作业
jobs:
  build-and-push:
    # 指定运行此作业的虚拟机环境
    runs-on: ubuntu-latest

    # 授予 GITHUB_TOKEN 写入 ghcr.io 的权限
    permissions:
      contents: read
      packages: write

    # 作业的步骤
    steps:
      # 步骤1: 检出代码
      # 使用官方的 actions/checkout@v4 来获取你的仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤2: 登录到 GitHub Container Registry (ghcr.io)
      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # github.actor 是触发工作流的用户名
          # secrets.GITHUB_TOKEN 是由 GitHub 自动提供的令牌
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 步骤3: 登录到 Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          # 使用我们之前在 GitHub Secrets 中存储的凭证
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 步骤4: 提取 Docker 元数据 (镜像名称和标签)
      # 这个 action 会自动生成标签，例如 'latest', git-sha, etc.
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}
            ghcr.io/${{ github.repository }}
          # github.event.repository.name 是仓库名
          # github.repository 是 '用户名/仓库名'
          # ghcr.io 要求镜像名称为小写

      # 步骤5: 设置 Buildx 以便后续使用
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --- ↓↓↓ 我在这里添加了新的调试步骤 ↓↓↓ ---
      - name: 🧐 Verify Filesystem Contents
        run: |
          echo "Listing all files in the repository..."
          ls -R
          echo "-------------------------------------"
          echo "Displaying Dockerfile contents..."
          cat Dockerfile
          echo "-------------------------------------"
      # --- ↑↑↑ 添加结束 ↑↑↑ ---

      # 步骤6: 构建镜像并推送到两个仓库
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          # 构建的上下文目录 (项目根目录)
          context: .
          # 推送镜像到仓库
          push: true
          # 使用元数据步骤生成的标签
          tags: ${{ steps.meta.outputs.tags }}
          # 使用元数据步骤生成的标签
          labels: ${{ steps.meta.outputs.labels }}
           # --- ↓↓↓ 添加这一行以禁用缓存 ↓↓↓ ---
           no-cache: true
